#include <iostream>
#include <list>
#include <algorithm>
#include <string>
#include <iterator>

class Car
{
private:
	std::string name;
	int year;
	float volume;
	float cost;
public:
	Car() = delete;
	Car(std::string name, int year, float volume, float cost)
	{
		this->name = name;
		this->year = year;
		this->volume = volume;
		this->cost = cost;
	}
	Car(const Car& from) = default;
	Car(Car&& from) = default;
	Car& operator=(const Car& right) = default;
	Car& operator=(Car&& right) = default;
	~Car() {}
	void print(void) const
	{
		std::cout << name << std::endl;
		std::cout << year << std::endl;
		std::cout << volume << std::endl;
		std::cout << cost << std::endl << std::endl;
	}
	int getYear(void)
	{return year;}
	float getCost(void)
	{return cost;}
	float getVolume(void)
	{return volume;}
	std::string getName(void)
	{return name;}
};

void pause(void);
void printList(Car& obj);
std::list<Car> sorting(std::list<Car>& carList);
bool sortYear(Car &first, Car& second);
bool sortCost(Car& first, Car& second);
bool sortVolume(Car& first, Car& second);
Car add_car();
void search(std::list<Car> &carList);
void searchName(std::list<Car>& carList);
void searchYear(std::list<Car>& carList);
void searchVolume(std::list<Car>& carList);
void searchCost(std::list<Car>& carList);
std::list<Car> delete_car(std::list<Car>& carList);
std::list<Car> menu(std::list<Car>& carList);

int main()
{
	setlocale(LC_ALL, "Russian");
	Car obj1("car1", 2016, 1.6, 10000);
	Car obj2("car2", 2013, 1.8, 11000);
	Car obj3("car3", 2012, 1.9, 9000);
	Car obj4("car4", 2019, 2.0, 20000);
	Car obj5("car5", 2018, 2.2, 22000);
	Car mass[] = { obj1, obj2, obj3, obj4, obj5 };
	std::list<Car> carList(mass, mass + 5);
	carList = menu(carList);
	return 0;
}

std::list<Car> menu(std::list<Car>& carList)
{
	int choice = 0;
	_Repeat:
	std::cout << "Выберите желаемое действие" << std::endl << "1 - Вывести список доступных авто на экран" << std::endl
		<< "2 - добавить новую машину в список" << std::endl << "3 - Выбрать машину для удаления из списка" << std::endl
		<< "4 - Найти машину в списке по одной из характеристик" << std::endl << "5 - Выполнить сортировку списка" << std::endl
		<< "0 - закончить работу программы" << std::endl;
	std::cin >> choice;
	if (choice != 1 && choice != 2 && choice != 3 && choice != 4 && choice != 5 && choice != 0)
	{
		std::cout << "Неверно! Попробуйте ещё раз" << std::endl;
		goto _Repeat;
	}
	else
	{
		if (choice == 1)
		{
			pause();
			std::for_each(carList.begin(), carList.end(), printList);
			pause();
			goto _Repeat;
		}
		if (choice == 2)
		{
			pause();
			carList.push_back(add_car());
			pause();
			goto _Repeat;
		}
		if (choice == 3)
		{
			pause();
			delete_car(carList);
			pause();
			goto _Repeat;

		}
		if (choice == 4)
		{
			pause();
			search(carList);
			pause();
			goto _Repeat;
		}
		if (choice == 5)
		{
			pause();
			carList = sorting(carList);
			pause();
			goto _Repeat;
		}
		if (choice == 0)
			return carList;
	}
	pause();
	return carList;
}
void pause(void)
{
	system("pause");
	system("cls");
	return;
}
void printList(Car& obj)
{obj.print();}

std::list<Car> sorting(std::list<Car>& carList)
{
	int choice = 0;
	_Repeat:
	std::cout << "Укажите параметр для сортировки" << std::endl << "1 - Сортировка по году выпуска" << std::endl
		<< "2 - Сортировка по обьёму двигателя" << std::endl << "3 - Сортировка по цене" << std::endl;
	std::cin >> choice;
	if (choice != 1 && choice != 2 && choice != 3)
	{
		std::cout << "Неверно! Попробуйте ещё раз" << std::endl;
		goto _Repeat;
	}
	else
	{
		if (choice == 1)
			carList.sort(sortYear);
		if (choice == 2)
			carList.sort(sortVolume);
		if (choice == 3)
			carList.sort(sortCost);
	}
	return carList;
}

bool sortYear(Car &first, Car& second)
{return (first.getYear() < second.getYear());}
bool sortCost(Car& first, Car& second)
{return (first.getCost() < second.getCost());}
bool sortVolume(Car& first, Car& second)
{return (first.getVolume() < second.getVolume());}
Car add_car()
{
	std::string name;
	int year;
	float volume, cost;
	std::cout << "Введите название машины" << std::endl;
	std::cin >> name;
	std::cout << "Введите год выпуска:" << std::endl;
	std::cin >> year;
	std::cout << "Введие обьём двигателя:" << std::endl;
	std::cin >> volume;
	std::cout << "Введите цену для продажи:" << std::endl;
	std::cin >> cost;
	Car obj(name, year, volume, cost);
	return obj;
}
void search(std::list<Car>& carList)
{
	int choise = 0;
	_Repeat:
	std::cout << "Укажите по какому признаку искать машину" << std::endl << "1- имя" << std::endl << "2- год выпуска"
		<< std::endl << "3- обьём двигателя" << std::endl << "4- цена" << std::endl;
	std::cin >> choise;
	pause();
	if (choise != 1 && choise != 2 && choise !=3 && choise != 4)
	{
		std::cout << "Неверно. Попробуйте ещё раз" << std::endl;
		goto _Repeat;
	}
	else
	{
		if (choise == 1)
			searchName(carList);
		if (choise == 2)
			searchYear(carList);
		if (choise == 3)
			searchVolume(carList);
		if (choise == 4)
			searchCost(carList);
	}
}
void searchName(std::list<Car>& carList)
{
	std::string name;
	int counter = 0;
	std::cout << "Введите имя для поиска" << std::endl;
	std::cin >> name;
	std::list<Car>::iterator it = carList.begin();
	while (it != carList.end())
	{
		if (it->getName() == name)
		{
			it->print();
			counter++;
		}
		it++;
	}
	if (counter == 0)
		std::cout << "Ничего не найдено" << std::endl;
}
void searchYear(std::list<Car>& carList)
{
	int year;
	int counter = 0;
	std::cout << "Введите год выпуска для поиска" << std::endl;
	std::cin >> year;
	std::list<Car>::iterator it = carList.begin();
	while (it != carList.end())
	{
		if (it->getYear() == year)
		{
			it->print();
			counter++;
		}
		it++;
	}
	if (counter == 0)
		std::cout << "Ничего не найдено" << std::endl;
}
void searchVolume(std::list<Car>& carList)
{
	float volume = 0.0;
	int counter = 0;
	std::cout << "Введите обьём двигателя для поиска" << std::endl;
	std::cin >> volume;
	std::list<Car>::iterator it = carList.begin();
	while (it != carList.end())
	{
		if (it->getVolume() == volume)
		{
			it->print();
			counter++;
		}
		it++;
	}
	if (counter == 0)
		std::cout << "Ничего не найдено" << std::endl;
}
void searchCost(std::list<Car>& carList)
{
	float cost;
	int counter = 0;
	std::cout << "Введите цену для поиска" << std::endl;
	std::cin >> cost;
	std::list<Car>::iterator it = carList.begin();
	while (it != carList.end())
	{
		if (it->getCost() == cost)
		{
			it->print();
			counter++;
		}
		it++;
	}
	if (counter == 0)
		std::cout << "Ничего не найдено" << std::endl;
}
std::list<Car> delete_car(std::list<Car>& carList)
{
	std::string name;
	int counter = 0;
	std::cout << "Введите имя для поиска и удаления" << std::endl;
	std::cin >> name;
	std::list<Car>::iterator it = carList.begin();
	while (it != carList.end())
	{
		if (it->getName() == name)
		{
			std::cout << it->getName() << " удалено!" << std::endl;
			it = carList.erase(it);
			counter++;
			break;
		}
		it++;
	}
	if (counter == 0)
		std::cout << "Ничего не удалено" << std::endl;
	return carList;
}
